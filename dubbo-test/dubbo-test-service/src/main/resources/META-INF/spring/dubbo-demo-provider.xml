<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    <!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
    <dubbo:application name="demo-provider" owner="programmer" organization="dubbox"/>
 	<!-- 使用zookeeper注册中心暴露服务地址 -->
    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>
    
    <!-- 用dubbo协议暴露服务 -->
    <dubbo:protocol name="dubbo" port="20980" />
	
	<dubbo:service interface="com.dubbo.test.api.HelloService" ref="helloService"  protocol="dubbo" />
    <bean id="helloService" class="com.dubbo.test.service.HelloServiceImpl"></bean>

    <!--uncomment this if you want to test dubbo's monitor-->
    <dubbo:monitor protocol="registry"/>

    <!-- here we demonstrate both annotation-based and xml-based configs -->
    <!-- <dubbo:annotation package="com.alibaba.dubbo.demo.user.facade" /> -->

    <!-- <dubbo:protocol name="dubbo" serialization="kryo" optimizer="com.alibaba.dubbo.demo.SerializationOptimizerImpl"/> -->
    <!--<dubbo:protocol name="dubbo" serialization="fst" optimizer="com.alibaba.dubbo.demo.SerializationOptimizerImpl"/>-->

    <!--<dubbo:protocol name="dubbo" serialization="nativejava"/>-->
    <!--<dubbo:protocol name="dubbo" serialization="hessian2"/>-->
    <!--<dubbo:protocol name="dubbo" serialization="fastjson"/>-->
    <!--<dubbo:protocol name="dubbo" serialization="dubbo"/>-->


    <!-- 用dubbo协议暴露服务 -->
    <dubbo:protocol name="http" port="8889"/>
   	<dubbo:protocol name="hessian" port="8890"/>
   	<dubbo:protocol name="webservice" port="8892"/> 
  	<dubbo:protocol name="rest" port="8888" threads="500" contextpath="services" server="tomcat" accepts="500"
                    extension="com.alibaba.dubbo.demo.extension.TraceInterceptor,
                    com.alibaba.dubbo.demo.extension.TraceFilter,
                    com.alibaba.dubbo.demo.extension.ClientTraceFilter,
                    com.alibaba.dubbo.demo.extension.DynamicTraceBinding,
                    com.alibaba.dubbo.demo.extension.CustomExceptionMapper,
                    com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter"/>
     <!--TODO according to the spring convention, we should use something like keep-alive-->
    <!-- use netty server -->
    <!--<dubbo:protocol name="rest" port="8888" keepalive="true" server="netty" iothreads="5" threads="100" contextpath="services"/>-->

    <!-- use tjws server -->
    <!--<dubbo:protocol name="rest" port="8888" server="tjws" contextpath="services"/>-->   
                 
    <!-- use the external tomcat or other server with the servlet approach; the port and contextpath must be exactly the same as those in external server -->
    <!--<dubbo:protocol name="rest" port="8888" contextpath="services" server="servlet"/>-->
    
    
    <bean id="userService" class="com.dubbox.test.service.user.UserServiceImpl" />
    <bean id="userRestService" class="com.dubbox.test.service.user.facade.UserRestServiceImpl">
        <property name="userService" ref="userService"/>
    </bean>  
     <bean id="anotherUserRestService" class="com.dubbox.test.service.user.facade.AnotherUserRestServiceImpl">
        <property name="userService" ref="userService"/>
    </bean> 
   <bean id="anotationDrivenUserRestService" class="com.dubbox.test.service.user.facade.AnnotationDrivenUserRestServiceImpl">
        <property name="userService" ref="userService"/>
    </bean> 
    <dubbo:service interface="com.dubbox.test.api.UserService" ref="userService"  protocol="dubbo" />
	<dubbo:service interface="com.dubbox.test.api.user.facade.UserRestService" ref="anotationDrivenUserRestService"  validation="true"/>
	<dubbo:service interface="com.dubbox.test.api.user.facade.AnotherUserRestService" ref="anotherUserRestService"  protocol="rest"  timeout="2000" connections="100" validation="true"/>

 	
</beans>